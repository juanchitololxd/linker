# This workflow will build a golang project and run tests
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy

on:
  push:
    branches: [ "main", "features/pipeline" ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Environment variables prod
      env:
        FEATURE_FLAG: ${{ secrets.FEATURE_FLAG }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWD: ${{ secrets.DB_PASSWD }}
        BASE_URL: ${{ secrets.BASE_URL }}
      run: |
        chmod +x ./scripts/setup-project-linux.sh
        ./scripts/setup-project-linux.sh prod
        sed -i 's/{{DB_USERNAME}}/'"$DB_USERNAME"'/g' .env
        echo "DB_USERNAME: $DB_USERNAME"
        sed -i 's/{{DB_PASSWD}}/'"$DB_PASSWD"'/g' .env
        echo "DB_PASSWD: $DB_PASSWD"
        sed -i 's/{{DB_HOST}}/'"$DB_HOST"'/g' .env
        echo "DB_HOST: $DB_HOST"
        sed -i 's/{{DB_PORT}}/'"$DB_PORT"'/g' .env
        echo "DB_PORT: $DB_PORT"
        sed -i 's/{{DB_NAME}}/'"$DB_NAME"'/g' .env
        echo "DB_NAME: $DB_NAME"
        sed -i 's/{{BASE_URL}}/'"$BASE_URL"'/g' .env
        echo "BASE_URL: $BASE_URL"
    - name: Build
      run: go build -v ./cmd/api
    - name: set up ssh
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY_JP }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H 149.130.182.145 >> ~/.ssh/known_hosts
    - name: Transfer files via SCP to prod
      run: |
        scp -i ~/.ssh/id_rsa ./scripts/kill-current-process.sh ubuntu@149.130.182.145:~/scripts/kill-current-process.sh
        ssh -i ~/.ssh/id_rsa ubuntu@149.130.182.145 'chmod +x ~/scripts/kill-current-process.sh && ~/scripts/kill-current-process.sh && mkdir -p linker-prod'
        scp -i ~/.ssh/id_rsa api ubuntu@149.130.182.145:/home/ubuntu/linker-prod/url-shortener
        scp -i ~/.ssh/id_rsa .env ubuntu@149.130.182.145:/home/ubuntu/linker-prod/.env
        echo "archivos enviados"
        ssh -i ~/.ssh/id_rsa ubuntu@149.130.182.145 'cd ~/linker-prod && nohup ./url-shortener > ./url-shortener.log 2>&1 &'
    - name: E2E Tests
      run: |
        BASE_URL=$(grep -oP '(?<=BASE_URL=).*' .env)
        echo "BASE_URL: $BASE_URL"
        response=$(curl -s "${BASE_URL%/}/ping")
        if [ "$response" != '"pong"' ]; then
          echo "Validation failed: expected 'pong' but got '$response'"
          exit 1
        fi
        echo "Validation succeeded: received 'pong'"
